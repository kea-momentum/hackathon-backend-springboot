<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!-- 환경 변수 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}} [%thread] %clr(%5level) %cyan(%logger) - %msg%n"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}} [%thread] %5level %logger - %msg%n"/>
    <property name="SLACK_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}} [%thread] %5level %logger %n %n %msg %n"/>
    <springProperty name="SLACK_WEBHOOK_URL_DEV_WARN" source="logging.slack.webhook-url-dev-warn"/>
    <springProperty name="SLACK_WEBHOOK_URL_DEV_ERROR" source="logging.slack.webhook-url-dev-error"/>
    <springProperty name="SLACK_WEBHOOK_URL_PROD_ERROR" source="logging.slack.webhook-url-prod-error"/>

    <!-- Console 출력 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- INFO 파일 -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <mdc/>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}}",
                        "log.level": "%-5level",
                        "message": "%message",
                        "process.thread.name": "%t",
                        "log.logger": "%C{2}",
                        "sessionId": "%X{sessionId}",
                        "clientIp": "%X{clientIp}",
                        "serverIp": "%X{serverIp}",
                        "methodName": "%X{methodName}",
                        "executionTime": "%X{executionTime}"
                        }
                    </pattern>
                </pattern>
            </providers>

            <jsonGeneratorDecorator class="net.logstash.logback.decorate.CompositeJsonGeneratorDecorator">
                <decorator class="net.logstash.logback.decorate.PrettyPrintingJsonGeneratorDecorator"/>
            </jsonGeneratorDecorator>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>./logs/info-%d{yyyy-MM-dd, ${logback.timezone:-Asia/Seoul}}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- WARN 파일 -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <mdc/>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}}",
                        "log.level": "%-5level",
                        "message": "%yellow(%message)",
                        "process.thread.name": "%t",
                        "log.logger": "%C{2}",
                        "stacktrace": "%rEx"
                        }
                    </pattern>
                </pattern>
            </providers>

            <jsonGeneratorDecorator class="net.logstash.logback.decorate.CompositeJsonGeneratorDecorator">
                <decorator class="net.logstash.logback.decorate.PrettyPrintingJsonGeneratorDecorator"/>
            </jsonGeneratorDecorator>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>./logs/warn-%d{yyyy-MM-dd, ${logback.timezone:-Asia/Seoul}}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- ERROR 파일 -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <mdc/>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS, ${logback.timezone:-Asia/Seoul}}",
                        "log.level": "%-5level",
                        "message": "%message",
                        "process.thread.name": "%t",
                        "log.logger": "%C{2}",
                        "stacktrace": "%rEx"
                        }
                    </pattern>
                </pattern>
            </providers>

            <jsonGeneratorDecorator class="net.logstash.logback.decorate.CompositeJsonGeneratorDecorator">
                <decorator class="net.logstash.logback.decorate.PrettyPrintingJsonGeneratorDecorator"/>
            </jsonGeneratorDecorator>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>./logs/error-%d{yyyy-MM-dd, ${logback.timezone:-Asia/Seoul}}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- Slack -->
    <appender name="SLACK_DEV_WARN" class="com.github.maricn.logback.SlackAppender">
        <webhookUri>${SLACK_WEBHOOK_URL_DEV_WARN}</webhookUri>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${SLACK_LOG_PATTERN}</pattern>
        </layout>
        <username>backend-dev</username>
        <iconEmoji>:eyes:</iconEmoji>
        <colorCoding>true</colorCoding>
    </appender>

    <appender name="ASYNC_SLACK_DEV_WARN" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="SLACK_DEV_WARN"/>
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>WARN</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="SLACK_DEV_ERROR" class="com.github.maricn.logback.SlackAppender">
        <webhookUri>${SLACK_WEBHOOK_URL_DEV_ERROR}</webhookUri>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${SLACK_LOG_PATTERN}</pattern>
        </layout>
        <username>backend-dev</username>
        <iconEmoji>:rotating_light:</iconEmoji>
        <colorCoding>true</colorCoding>
    </appender>

    <appender name="ASYNC_SLACK_DEV_ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="SLACK_DEV_ERROR"/>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <appender name="SLACK_PROD_ERROR" class="com.github.maricn.logback.SlackAppender">
        <webhookUri>${SLACK_WEBHOOK_URL_PROD_ERROR}</webhookUri>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${SLACK_LOG_PATTERN}</pattern>
        </layout>
        <username>backend-prod</username>
        <iconEmoji>:rotating_light:</iconEmoji>
        <colorCoding>true</colorCoding>
    </appender>

    <appender name="ASYNC_SLACK_PROD_ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="SLACK_PROD_ERROR"/>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- Spring profile 설정 -->
    <springProfile name="local">
        <logger name="com.momentum.releaser" level="DEBUG"/>
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO"/>
        </root>
    </springProfile>

    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO"/>
            <appender-ref ref="WARN"/>
            <appender-ref ref="ERROR"/>
            <appender-ref ref="ASYNC_SLACK_DEV_WARN"/>
            <appender-ref ref="ASYNC_SLACK_DEV_ERROR"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO"/>
            <appender-ref ref="WARN"/>
            <appender-ref ref="ERROR"/>
            <appender-ref ref="ASYNC_SLACK_PROD_ERROR"/>
        </root>
    </springProfile>

</configuration>
